/* 原型方法扩展 */
String.prototype.format = function (args) {
    var result = this;
    if (arguments.length > 0) {
        if (arguments.length == 1 && typeof (args) == "object") {
            for (var key in args) {
                if (args[key] != undefined) {
                    var reg = new RegExp("({" + key + "})", "g");
                    result = result.replace(reg, args[key]);
                }
            }
        } else {
            for (var i = 0; i < arguments.length; i++) {
                if (arguments[i] != undefined) {
                    var reg = new RegExp("({)" + i + "(})", "g");
                    result = result.replace(reg, arguments[i]);
                }
            }
        }
    }
    return result;
};

Date.prototype.Format = function (fmt) { //author: meizz
    var o = {
        "M+": this.getMonth() + 1,
        //月份
        "d+": this.getDate(),
        //日
        "h+": this.getHours(),
        //小时
        "m+": this.getMinutes(),
        //分
        "s+": this.getSeconds(),
        //秒
        "q+": Math.floor((this.getMonth() + 3) / 3),
        //季度
        "S": this.getMilliseconds() //毫秒
    };
    if (/(y+)/.test(fmt)) fmt = fmt.replace(RegExp.$1, (this.getFullYear() + "").substr(4 - RegExp.$1.length));
    for (var k in o)
        if (new RegExp("(" + k + ")").test(fmt)) fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : (("00" + o[k]).substr(("" + o[k]).length)));
    return fmt;
};

var headerAnalysis = {};
NativeFunc({
    ACTION: "DEVICE_INFO",
    PARAM: {
        INDEX: '1',
    }
}, function (req) {
    // headerAnalysis 此参数为请求头部信息 主要用于微信端
    // 原生端调用时 有isNew或isToken参数会自动添加下面的设置并将我们的设置覆盖
    headerAnalysis = {
        "platform": "2", // h5 = 2
        "model": req.model || "", //
        "os-version": req.os_version || "", // 操作系统
        "main-area": req.main_area || "", // 市级
        "device": req.device || "", // 设备型号
        "spec-area": req.spec_area || "", // 区级行政区
        "screen-height": req.screen_height || "", //
        "channel": req.channel || "10006", // 渠道
        "screen-width": req.screen_width || "", //
        "app-version": req.app_version || "", // app
        "version": req.version || "",// 1.0.0
    };
});

/* 公共类 */
var custom = {
    isEshiminapp: function () {
        var ua = window.navigator.userAgent.toLowerCase();
        if (ua.match(/eshiminapp/i) == 'eshiminapp') {
            return true;
        } else {
            return false;
        }
    },
    isSMY: function () {
        var ua = window.navigator.userAgent.toLowerCase();
        var smyCodeList = ['10034', '10042', '10050', '10051']
        if (ua.match(/eshiminapp/i) == 'eshiminapp' || smyCodeList.indexOf(getParams('channelCode')) != -1) {
            return true;
        } else {
            return false;
        }
    },
    //获取没有数据DOM
    getNoneDataImg: function (text, top) {
        if (text == undefined || text.length == 0) text = '没有数据';
        if (top == undefined || top.length == 0) top = 50;
        var imgHtml = '<div class="none-data">\n' +
            '                <img src="../custom/images/no-data.png" style="margin-top: ' + top + '%"/>\n' +
            '                <p>' + text + '</p>\n' +
            '            </div>';
        return imgHtml;
    },
    isJKY: function () {
        var ua = window.navigator.userAgent.toLowerCase();
        if (ua.match(/healthcloud/i) == 'healthcloud') {
            return true;
        } else {
            return false;
        }
    },
    isWeiXin: function () {
        var ua = window.navigator.userAgent.toLowerCase();
        if (ua.match(/MicroMessenger/i) == 'micromessenger') {
            return true;
        } else {
            return false;
        }
    },

    isXiaoChenXu: function () {
        var ua = window.navigator.userAgent.toLowerCase();
        if (ua.indexOf('miniprogram') > 0) {
            return true
        } else {
            return false;
        }
    },

    // 是否为支付宝app
    isAlipay: function () {
        var ua = window.navigator.userAgent.toLowerCase();
        if (ua.match(/alipayclient/i) == 'alipayclient') {
            return true;
        } else {
            return false;
        }
    },

    isAlipayXCX: function () {
        var ua = window.navigator.userAgent.toLowerCase();
        if (ua.match(/alipayclient/i) == 'alipayclient' && ua.indexOf('miniprogram') > 0) {
            return true;
        } else {
            return false;
        }
    },
    isIOS: function () {
        var u = navigator.userAgent;
        if (u.indexOf("iPhone") > -1 || u.indexOf("iOS") > -1) {
            return true;
        }
        return false;
    },
    // 日期格式化
    getFormatDate: function (dataObj) {
        var seperator1 = "-";

        var year = dataObj.getFullYear();
        var month = dataObj.getMonth() + 1;
        var strDate = dataObj.getDate();

        if (month >= 1 && month <= 9) {
            month = "0" + month;
        }

        if (strDate >= 0 && strDate <= 9) {
            strDate = "0" + strDate;
        }

        var currentdate = year + seperator1 + month + seperator1 + strDate;

        return currentdate;
    },

    // 校验手机号码
    judgePhone: function (phone) {

        var reg = /^1\d{10}$/;

        if (reg.test(phone)) {
            return true;
        } else {
            return false;
        }

    },

    // 校验身份证号码
    judgeIDCode: function (code) {

        var reg = /(^\d{15}$)|(^\d{18}$)|(^\d{17}(\d|X|x)$)/;

        if (reg.test(code)) {
            return true;
        } else {
            return false;
        }
    },

    // 通过身份证号码获取出生年月日
    getBirthdayFromIdCard: function (idCard) {
        var birthday = "";
        if (idCard != null && idCard != "") {
            if (idCard.length == 15) {
                birthday = "19" + idCard.substr(6, 6);
            } else if (idCard.length == 18) {
                birthday = idCard.substr(6, 8);
            }

            birthday = birthday.replace(/(.{4})(.{2})/, "$1-$2-");
        }

        return birthday;
    },

    // 	// 示例
    // 	custom.beAnalysis('click', 'page_zzjd_dzxx', 'button_syb', uid, false, {token : token, channelCode : channelCode, lightAppCode : lightAppCode, timestamp : new Date().getTime()});
    // 	// 行为日志 埋点请求
    // _beforeSendObj Petu添加
    beAnalysis: function (_event, _page, _module, _additionalObj) {
        if (nativeObj.isNative === '1') {
            try {
                var date = new Date();
                var timeFormat = date.Format("yyyy-MM-dd hh:mm:ss");
                var timeStamp = date.getTime();
                var param = {
                    action: {
                        event: _event,
                        page: _page,
                        module: _module,
                        actionTime: timeFormat,
                        uid: localStorage.getItem('jkyUid') || localStorage.getItem('uid') || '',
                        additional: {
                            platform: 'jky',
                            id: ""
                        }
                    }
                };
                if (_additionalObj) {
                    for (key in _additionalObj) {
                        param.action.additional[key] = _additionalObj[key]
                    }
                }
                $.ajax({
                    url: net.logAction, // isNew IOS用 isToken Android用
                    type: "POST",
                    headers: headerAnalysis,
                    beforeSend: function (request) {
                        request.setRequestHeader('token', localStorage.getItem('pzNetToken') || getParams('netToken'));
                        request.setRequestHeader("channelCode", localStorage.getItem('pzChannelCode') || getParams('channelCode'));
                        request.setRequestHeader("lightAppCode", localStorage.getItem('pzLightAppCode') || getParams('lightAppCode'));
                        request.setRequestHeader('timestamp', timeStamp);
                    },
                    contentType: "application/json; charset=utf-8",
                    data: JSON.stringify(param),
                    dataType: "json",
                    success: function (data) {
                        console.log(data);
                        //alert(JSON.stringify(data))
                    },
                    error: function (err) {
                        console.log(err);
                        //alert(JSON.stringify(err))
                        if (err.status == 404) alert('404 : ' + JSON.stringify(err)); //404时给提示
                    }
                })
            } catch (e) {
                console.log(e);
            }
        }
    },

    /*
        opts：参数对象，可对AJAX所有参数、函数重写
        success：成功回调函数
        onloading：请求接口之前显示loading，默认显示loading
    */
    // appVersion: getParams('appVersion'),//App版本
    appVersion: '4.0.0',
    ajaxRequest: function (opts, successFun, noloading) {

        var tk;
        pageData && pageData.userInfo && (tk = pageData.userInfo.token);

        var param = {
            type: "GET",//默认GET请求
            dataType: "text",//字符串格式，返回为字符串密文
            beforeSend: function (request) {

                //全国版兼容
                // if (pageData && !pageData.addrCode)
                //     pageData.addrCode = custom.getParams('addrCode');
                // if (pageData.addrCode)
                //     request.setRequestHeader("addrCode", pageData.addrCode);

                request.setRequestHeader("token", tk);
                request.setRequestHeader("channelCode", pageData.channelCode);
                request.setRequestHeader("lightAppCode", pageData.lightAppCode);
                request.setRequestHeader('timestamp', new Date().getTime());
                request.setRequestHeader('request-id', new Date().getTime() + custom.random(true));
            },
            success: function (data) {
                /* app4.9.0 - 对 data 进行解密*/
                if (custom.appVersion && custom.appVersion >= '4.9.0') {
                    NativeFunc({
                        ACTION: "DECRYPT",
                        PARAM: {
                            TEXT: data,
                        }
                    }, function (req) {
                        req = JSON.parse(req);
                        successFun(JSON.parse(req.TEXT));
                    });
                }
                else {
                    // typeof data === 'string' ? successFun(JSON.parse(data)) : successFun(data);
                    var successData=JSON.parse(data);
                    if(successData.code==2000){
                        NativeFunc({
                            ACTION: 'OPENURL',
                            PARAM: {
                                URL: nativeObj.htmlPath + '/limit.html' + '?v=20220314141058&forbidden=1&isFull=1&statusBarDark=1&channelCode=' + pageData.channelCode + '&lightAppCode=' + pageData.lightAppCode
                            }
                        })
                    }else{
                        successFun(successData);
                    }
                }
                !noloading && hideNewLoading();
            },
            error: function (error) {
                console.log(error)
                hideNewLoading();
                if(error.response.status==2000){
                    NativeFunc({
                        ACTION: 'OPENURL',
                        PARAM: {
                            URL: nativeObj.htmlPath + '/limit.html' + '?v=20220314141058&forbidden=1&isFull=1&statusBarDark=1&channelCode=' + pageData.channelCode + '&lightAppCode=' + pageData.lightAppCode
                        }
                    })
                }else{
                    custom.toptip('网络出了点异常，请重试', 'error');
                }
            }
        };
        //组装参数
        if (opts) {
            /*参数/函数 赋值/重写*/
            for (key in opts) {
                param[key] = opts[key]
            }

            /* 健康云 4.9.0 开始，对url、data加密*/
            if (custom.appVersion && custom.appVersion >= '4.9.0') {
                /* 调用原生加密、请求函数 */
                var encryptFunc = function (encryptParam) {
                    var _url = '';//待加密url
                    var _data = '';//待加密data
                    var _timestamp = new Date().getTime();

                    encryptParam['url'] && (_url = location.origin + encryptParam['url']);//完整URL
                    if (encryptParam['data']) {
                        //POST 请求在传入ajaxRequest已转成字符串了，不需要处理
                        if (encryptParam['type'].toUpperCase() == 'POST')
                            _data = encryptParam['data'];
                        else
                            _data = JSON.stringify(encryptParam['data']);
                    };
                    //调用原生进行加密
                    NativeFunc({
                        ACTION: "ENCRYPT",
                        PARAM: {
                            URL: _url,
                            TEXT: _data,
                            MODE: encryptParam['type'],
                            "TIMESTAMP": _timestamp
                        }
                    }
                        , function (req) {
                            var req = JSON.parse(req);

                            /*发送加密请求时，需要在头部设置签名等参数（和非加密请求有所差异）*/
                            encryptParam.beforeSend = function (request) {
                                request.setRequestHeader("token", req.TOKEN);
                                request.setRequestHeader("sign", req.SIGN);
                                request.setRequestHeader("appid", req.APPID);
                                request.setRequestHeader('request-id', randomWord(true));
                                request.setRequestHeader('timestamp', _timestamp);
                            }
                            encryptParam.url = req.URL;/*密文URL*/

                            if (encryptParam['type'].toUpperCase() == 'GET') {
                                /*GET请求 已通过加密已将data参数追加到URL之后，data不需要传值*/
                                encryptParam.data && (delete encryptParam.data);
                            }
                            else {
                                /*POST请求，data为密文字符串（非JSON），同时设置 contentType */
                                if (req.TEXT) encryptParam['data'] = req.TEXT;//POST 加密后data
                                encryptParam.contentType = 'text/plain';
                            }
                            !noloading && showNewLoading();
                            $.ajax(encryptParam);
                        });
                }

                encryptFunc(param);
            }
            else {
                //注意，只改了未加密情况下请求参数增加accountId
                //POST请求设置 contentType
                if (opts.type == 'POST') {
                    param.contentType = "application/json; charset=utf-8";
                    var transedParam = JSON.parse(param.data);
                    if (!transedParam.accountId) {
                        transedParam.accountId = localStorage.getItem("userInfo") ? JSON.parse(localStorage.getItem("userInfo")).accountId || "" : "";
                        param.data = JSON.stringify(transedParam)
                    }
                } else {
                    if (param['url'].indexOf("light-app-get-token-by-auth-code") == -1) {
                        var transedParam = param.data;
                        if (transedParam) {
                            if (!transedParam.accountId) {
                                transedParam.accountId = localStorage.getItem("userInfo") ? JSON.parse(localStorage.getItem("userInfo")).accountId || "" : "";
                                param.data = transedParam;
                            }
                        } else {
                            param.data = { accountId: (localStorage.getItem("userInfo") ? JSON.parse(localStorage.getItem("userInfo")).accountId || "" : "") };
                        }
                    }
                }
                /*其他容器请求*/
                !noloading && showNewLoading();
                $.ajax(param);
            }
        }
    },
    // 是否为微信小程序
    isWxXcx: function () {
        var ua = window.navigator.userAgent.toLowerCase();
        if (ua.indexOf('miniprogram') > 0) {
            return true
        } else {
            return false;
        }
    },
    // 打开健康云公共支付项目or健康云公共发票项目
    openWdjkyPayOrWdjkyInvoice: function (paymentNo, lightAppCode, invoiceHeaderId, isNad) {
        var originLightCode=lightAppCode;
        var lightAppCode=lightAppCode;
        if(lightAppCode.indexOf('less')>-1||lightAppCode.indexOf('more')>-1){
            lightAppCode=lightAppCode.substring(0,lightAppCode.length-4)
        }
        var payUrl = '';
        if (paymentNo) {
            var moreParams = '&closePage=1&btns=JKYHSZC_BTN03,JKYHSZC_BTN02&paymentNo=' + paymentNo+ '&mhjy=' + pageData.userInfo.mhjy;
        } else {
            if (originLightCode.indexOf('10130')>-1) {//跳商城详情
                if(originLightCode.indexOf('less')>-1){
                    if (netRoot == '/gw-te/') {
                        var moreParams = '&id=2024&isFull=1&forbidden=1'
                    } else {
                        //todo
                        var moreParams = '&id=3671&isFull=1&forbidden=1'
                    }
                }else{
                    if (netRoot == '/gw-te/') {
                        var moreParams = '&id=2039&isFull=1&forbidden=1'
                    } else {
                        //todo
                        var moreParams = '&id=3674&isFull=1&forbidden=1'
                    }
                }
            } else {
                if (isNad == 1) {
                    var moreParams = '&isNad=1';
                    if (invoiceHeaderId) {
                        moreParams += '&readyApply=1&relationshipId=' + invoiceHeaderId
                    } else {
                        moreParams += '&readyApply=1'
                    }
                }
            }
        }


        if (custom.isSMY()) {
            if (custom.isEshiminapp()) {
                // 市民云app
                if (netRoot == '/gw-te/') {

                } else {
                    payUrl =  'http://api.eshimin.com/api/oauth/authorize?client_id=12xhtzcovx&response_type=code&redirect_uri=' + encodeURIComponent('https://open.wdjky.com/lightapp/index?channelCode=10042&lightAppCode=' + lightAppCode + moreParams) + '&scope=read'
                }
                // h5跳转
                window.location.href = payUrl;
            } else {//其他市民云换code
            
                // custom.smyToPay(moreParams, lightAppCode);

                var appid = pageData.userInfo.appid;
                if (lightAppCode == "10200") {
                    // localStorage.setItem('payUserInfo', JSON.stringify(pageData.userInfo));
                    // window.location.href = location.protocol + '//' + location.hostname + '/wdjky-pay-h5/pay.html' + '?isToken=1&isNew=1&channelCode=' + pageData.userInfo.channelCode + '&lightAppCode=' + pageData.userInfo.lightAppCode + '&from=user&isNewLogin=1' + moreParams

                    if(pageData.userInfo.channelCode=="10051"){//支付宝随身办
                        payUrl = 'https://openauth.alipay.com/oauth2/publicAppAuthorize.htm?app_id=2017110309697054&scope=auth_user&redirect_uri=' + encodeURIComponent('https://open.wdjky.com/lightapp/index?channelCode=10026&lightAppCode=' + lightAppCode + '&appid=AB6BBEFE-B92B-4BD9-82AF-E944932C5BCD' + moreParams);
                    }else if(pageData.userInfo.channelCode=="10050"){
                        custom.toasts("暂不支持此渠道支付，请下载健康云app")
                        return
                        // payUrl = 'https://open.weixin.qq.com/connect/oauth2/authorize?appid=wx23a1f784b07b9a74&redirect_uri=' + encodeURIComponent('https://open.wdjky.com/lightapp/index?channelCode=10006&lightAppCode=' + lightAppCode + '&isToken=1&appid=DEF401F2-E798-4870-BDF9-EDFA8C9BA721&isNewLogin=1' + moreParams) + '&response_type=code&scope=snsapi_userinfo&state=STATE#wechat_redirect';
                    }
                    window.location.href = payUrl;
                }
                if (lightAppCode == "10288") {
                    localStorage.setItem('accountId', pageData.userInfo.accountId);
                    localStorage.setItem('netToken', pageData.userInfo.token);
                    localStorage.setItem('comparedNetToken', pageData.userInfo.token);
                    localStorage.setItem('invoiceChannelCode', pageData.userInfo.channelCode);
                    localStorage.setItem('invoiceLightCode', pageData.userInfo.lightAppCode);
                    window.location.href = location.protocol + '//' + location.hostname + '/healthcloud-invoice-address-h5/html/invoice.html' + '?isToken=1&isNew=1&channelCode=' + pageData.userInfo.channelCode + '&lightAppCode=' +  pageData.userInfo.lightAppCode + '&from=user&isNewLogin=1' + moreParams
                }
            }
        } else if (custom.isWeiXin()) {

            if (custom.isWxXcx()) {
                // 微信小程序 跳转支付
                custom.wxxcxToPay(moreParams, lightAppCode);

            } else {
                // 微信公众号
                if (netRoot == '/gw-te/') {

                    payUrl = 'https://open.weixin.qq.com/connect/oauth2/authorize?appid=wxdfb8a8e587e028a7&redirect_uri=' + encodeURIComponent('http://qyj-re.wdjky.com/healthCloud-open-api-te/lightapp/index?channelCode=10006&lightAppCode=' + lightAppCode + '&isToken=1&appid=DEF401F2-E798-4870-BDF9-EDFA8C9BA721&isNewLogin=1' + moreParams) + '&response_type=code&scope=snsapi_userinfo&state=STATE#wechat_redirect';

                } else {

                    payUrl = 'https://open.weixin.qq.com/connect/oauth2/authorize?appid=wx23a1f784b07b9a74&redirect_uri=' + encodeURIComponent('https://open.wdjky.com/lightapp/index?channelCode=10006&lightAppCode=' + lightAppCode + '&isToken=1&appid=DEF401F2-E798-4870-BDF9-EDFA8C9BA721&isNewLogin=1' + moreParams) + '&response_type=code&scope=snsapi_userinfo&state=STATE#wechat_redirect';
                }
                // h5跳转
                window.location.href = payUrl;
            }
        } else if (custom.isAlipay()) {
            if (custom.isAlipayXCX()) {
                // 支付宝小程序 跳转支付
                custom.zfbxcxToPay(moreParams, lightAppCode);
            } else {
                // 支付宝生活号
                if (netRoot == '/gw-te/') {
                    // 不支持测试环境直接跳转支付 参考开发文档 测试环境url进行操作可以进行扫码跳转支付
                } else {

                    payUrl = 'https://openauth.alipay.com/oauth2/publicAppAuthorize.htm?app_id=2017110309697054&scope=auth_user&redirect_uri=' + encodeURIComponent('https://open.wdjky.com/lightapp/index?channelCode=10026&lightAppCode=' + lightAppCode + '&appid=AB6BBEFE-B92B-4BD9-82AF-E944932C5BCD' + moreParams);
                }
                // h5跳转
                window.location.href = payUrl;
            }

        } else if (custom.isJKY()) {
            // 健康云app
            if (netRoot == '/gw-te/') {

                payUrl = 'http://qyj-re.wdjky.com/healthCloud-open-api-te/lightapp/index?isToken=1&isNew=1&channelCode=10001&lightAppCode=' + lightAppCode + '&from=user&appid=D960FC8D-0713-4C95-8C31-BCCFAD56EF7E&isNewLogin=1' + moreParams;

            } else {

                payUrl = 'https://open.wdjky.com/lightapp/index?isToken=1&isNew=1&channelCode=10001&lightAppCode=' + lightAppCode + '&from=user&appid=D960FC8D-0713-4C95-8C31-BCCFAD56EF7E&isNewLogin=1' + moreParams;
            }
            // 原生跳转
            NativeFunc({
                ACTION: 'OPENURL',
                PARAM: {
                    URL: payUrl
                }
            });
        } else {
            // 浏览器 跳转支付
            custom.browserToPay(moreParams, lightAppCode);
        }
    },
    // 浏览器 跳转支付
    browserToPay: function (moreParams, lightAppCode) {
        var appid = 'FBD3EBC1-7ED5-4961-8535-E500386BA68A';

        if (netRoot == '/gw-te/') {

            payUrl = 'http://qyj-re.wdjky.com/healthCloud-open-api-te/lightapp/index?isToken=1&isNew=1&channelCode=300168&lightAppCode=' + lightAppCode + '&from=user&appid=FBD3EBC1-7ED5-4961-8535-E500386BA68A&isNewLogin=1' + moreParams;

        } else {
            payUrl = 'https://open.wdjky.com/lightapp/index?isToken=1&isNew=1&channelCode=300168&lightAppCode=' + lightAppCode + '&from=user&appid=FBD3EBC1-7ED5-4961-8535-E500386BA68A&isNewLogin=1' + moreParams;
        }
        // 获取code并跳转 避免重复登录
        custom.getCodeToPay(appid, '300168', lightAppCode, payUrl);
    },
    smyToPay: function (moreParams, lightAppCode) {
        var appid = pageData.userInfo.appid;

        if (netRoot == '/gw-te/') {
            //
        } else {
            payUrl = 'https://open.wdjky.com/lightapp/index?isToken=1&isNew=1&channelCode='+pageData.userInfo.channelCode+'&lightAppCode=' + lightAppCode + '&from=user&appid='+appid+'&isNewLogin=1' + moreParams;
        }
        // 获取code并跳转 避免重复登录
        custom.getCodeToPay(appid, pageData.userInfo.channelCode, lightAppCode, payUrl);
    },
    zfbxcxToPay: function (moreParams, lightAppCode) {
        var appid = '6f103b0c0f87428f84f3b058f0925243';

        if (netRoot == '/gw-te/') {

            appid = '6f103b0c0f87428f84f3b058f0925243';
            payUrl = 'http://re.hcsrv.com/healthCloud-open-api-te/lightapp/index?isToken=1&isNew=1&channelCode=10080&lightAppCode=' + lightAppCode + '&from=user&appid=6f103b0c0f87428f84f3b058f0925243&isNewLogin=1' + moreParams;

        } else {
            payUrl = 'https://open.wdjky.com/lightapp/index?isToken=1&isNew=1&channelCode=10080&lightAppCode=' + lightAppCode + '&from=user&appid=6f103b0c0f87428f84f3b058f0925243&isNewLogin=1' + moreParams;
        }
        // 获取code并跳转 避免重复登录
        custom.getCodeToPay(appid, '10080', lightAppCode, payUrl);
    },
    // 微信小程序 跳转支付
    wxxcxToPay: function (moreParams, lightAppCode) {
        var appid = '353e67d7639c43f1810caa0a08ca82bc';

        if (netRoot == '/gw-te/') {

            appid = 'f10d161870b6419dbf5cfd0266858909';
            payUrl = 'http://re.hcsrv.com/healthCloud-open-api-te/lightapp/index?isToken=1&isNew=1&channelCode=10039&lightAppCode=' + lightAppCode + '&from=user&appid=f10d161870b6419dbf5cfd0266858909&isNewLogin=1' + moreParams;

        } else {
            payUrl = 'https://open.wdjky.com/lightapp/index?isToken=1&isNew=1&channelCode=10039&lightAppCode=' + lightAppCode + '&from=user&appid=353e67d7639c43f1810caa0a08ca82bc&isNewLogin=1' + moreParams;
        }
        // 获取code并跳转 避免重复登录
        custom.getCodeToPay(appid, '10039', lightAppCode, payUrl);
    },
    // 获取code并跳转 避免重复登录-非健康云app用
    getCodeToPay: function (appid, channelCode, lightAppCode, payUrl) {
        var reqParam={
            accountId: pageData.userInfo.accountId,
            appid: appid,
            channelCode: channelCode,
            lightAppCode: lightAppCode,
        };
        if(localStorage.getItem('wechat_openId')){
            reqParam.openid=localStorage.getItem('wechat_openId')
        }

        custom.ajaxRequest({
            url: net.appGetAuthcode,
            type: 'POST',
            async: false,
            data: JSON.stringify(reqParam)
        },
            function (data) {

                hideNewLoading();
                if (data.code == '0') {
                    if (data.data.authCode) {
                        payUrl = payUrl + '&code=' + data.data.authCode;
                        // h5跳转
                        window.location.href = payUrl;
                    }
                } else {
                    custom.toasts(data.code, data.msg);
                }
            });
    },
    random: function (randomFlag, min, max) {
        min = 3; max = 40;
        var str = "", range = min,
            arr = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];

        // 随机产生
        if (randomFlag) {
            range = Math.round(Math.random() * (max - min)) + min;
        }
        for (var i = 0; i < range; i++) {
            var pos = Math.round(Math.random() * (arr.length - 1));
            str += arr[pos];
        }
        return str;
    },
    //提示信息
    toptip: function (text, status) {
        var toptip = document.querySelector('#toptip');
        if (!toptip) {
            $("body").append('<div id="toptip" style="color: #FFF;position: fixed;top:-1rem;width: 100%;height: .8rem;line-height: .8rem;text-align:center;font-size:.35rem;-webkit-transition: top .2s;transition: top .2s;z-index:9999">' + text + '</div>');
            toptip = document.querySelector('#toptip');
        }
        var bgColor = '#f6383a';
        switch (status) {
            case 'success':
                bgColor = '#4cd964';
                break
            case 'warning':
                bgColor = '#f60';
                break
        }
        toptip.style.backgroundColor = bgColor;
        toptip.innerHTML = text;

        setTimeout(function () {
            toptip.style.top = '0rem';;
        }, 50)
        setTimeout(function () {
            toptip.style.top = '-1rem';
        }, 2500)
    },
    //提示信息
    toasts: function (text, callback, time) {
        var toast = document.querySelector('#toast');
        if (!toast) {
            $("body").append('<div id="toast" style="color: #fff;position: fixed;top:50%;background: #000;opacity: .65;font-size:14px;z-index:9999;border-radius: .15rem;padding:.2rem .35rem;left: 50%;transform:translate(-50%,-50%);text-align:center;">' + text + '</div>');
            toast = document.querySelector('#toast');
        }
        toast.style.display = 'block';
        toast.innerHTML = text;

        if (!time) time = 2000;

        setTimeout(function () {
            toast.style.display = 'none';
            callback && callback();
        }, time)
    },
};

/* 公共函数 */
// 初始化地址选择
function addressIOSelectInit(selectDom, showDom) {

    selectDom.addEventListener('click', function () {
        var iosSelect = new IosSelect(3,
            [iosProvinces, iosCitys, iosCountys],
            {
                title: '地址选择',
                itemHeight: 40,
                relation: [1, 1],
                oneLevelId: showDom.dataset['province'],
                twoLevelId: showDom.dataset['city'],
                threeLevelId: showDom.dataset['district'],
                callback: function (selectOneObj, selectTwoObj, selectThreeObj) {

                    showDom.dataset['province'] = selectOneObj.id;
                    showDom.dataset['city'] = selectTwoObj.id;
                    showDom.dataset['district'] = selectThreeObj.id;

                    showDom.innerText = (selectOneObj.value + ' ' + selectTwoObj.value + ' ' + selectThreeObj.value);
                }
            });
    });
};

// 初始化日期选择 yLimit年数限制
function dateIOSelectInit(yLimit) {

    var selectDateDom = document.querySelector('#selectDate');
    var showDateDom = document.querySelector('#showDate');
    var showDate = showDateDom.innerText;
    // 当前时间
    var now = new Date();
    var nowYear = now.getFullYear();
    var nowMonth = now.getMonth() + 1;
    var nowDay = now.getDate();
    // 默认当天
    showDateDom.dataset['year'] = nowYear;
    showDateDom.dataset['month'] = nowMonth;
    showDateDom.dataset['date'] = nowDay;
    // 是否有初始日期
    if (showDate.length == 10) {

        var dateArr = showDate.split('-');
        showDateDom.dataset['year'] = dateArr[0] * 1;
        showDateDom.dataset['month'] = dateArr[1] * 1;
        showDateDom.dataset['date'] = dateArr[2] * 1;
    };
    // 个位加0显示
    function formatNum(num) {
        num = num < 10 ? '0' + num : num;
        return num;
    };
    // 数据初始化
    function formatYear(nowYear) {
        var arr = [];

        if (yLimit == 18) {
            // 选择儿童出生日期 即小于18岁
            for (var i = nowYear - 18; i <= nowYear; i++) {
                arr.push({
                    id: i + '',
                    value: i + '年'
                });
            }
        };

        if (yLimit == 2) {
            // 设置接种日期 未来两年 加3
            for (var i = nowYear; i < nowYear + 3; i++) {
                arr.push({
                    id: i + '',
                    value: i + '年'
                });
            }
        };

        return arr;
    };
    function formatMonth(m, isAfter) {
        var arr = [];
        var n = isAfter ? m : 1;
        var len = isAfter ? 12 : m;
        for (var i = n; i <= len; i++) {
            arr.push({
                id: i + '',
                value: i + '月'
            });
        }
        return arr;
    };
    function formatDate(d, cd, isAfter) {
        var arr = [];
        var n = isAfter ? d : 1;
        var len = isAfter ? cd : d;
        for (var i = n; i <= len; i++) {
            arr.push({
                id: i + '',
                value: i + '日'
            });
        }
        return arr;
    }
    var yearData = function (callback) {
        callback(formatYear(nowYear))
    }
    var monthData = function (year, callback) {
        var m = 1; // 默认为 一月
        var isAfter = true; // 默认为 传入月份之后

        if (yLimit == 18) {
            if (year == (nowYear - 18)) {
                m = nowMonth;
            };
            if (year == nowYear) {
                m = nowMonth;
                isAfter = false;
            };
        };

        if (yLimit == 2) {
            if (year == (nowYear + 2)) {
                m = nowMonth;
                isAfter = false;
            };
            if (year == nowYear) {
                m = nowMonth;
            };
        };

        callback(formatMonth(m, isAfter));
    };
    var dateData = function (year, month, callback) {
        var d = 28; // 默认为 平年二月天数
        var cd = 28; // month实际天数
        var isAfter = false; // 默认为 传入日期之前

        if (/^(1|3|5|7|8|10|12)$/.test(month)) {
            d = 31;
            cd = 31;
        } else if (/^(4|6|9|11)$/.test(month)) {
            d = 30;
            cd = 30;
        } else if (/^2$/.test(month)) {
            if (year % 4 === 0 && year % 100 !== 0 || year % 400 === 0) {
                d = 29;
                cd = 29;
            };
        };

        if (yLimit == 18 && month == nowMonth) {
            if (year == (nowYear - 18)) {
                d = nowDay;
                isAfter = true;
            };
            if (year == nowYear) {
                d = nowDay;
            };
        };

        if (yLimit == 2 && month == nowMonth) {
            if (year == (nowYear + 2)) {
                d = nowDay;
            };
            if (year == nowYear) {
                d = nowDay;
                isAfter = true;
            };
        };

        callback(formatDate(d, cd, isAfter));
    };
    selectDateDom.addEventListener('click', function () {
        var iosSelect = new IosSelect(3,
            [yearData, monthData, dateData],
            {
                title: '请选择日期',
                itemHeight: 40,
                oneLevelId: showDateDom.dataset['year'],
                twoLevelId: showDateDom.dataset['month'],
                threeLevelId: showDateDom.dataset['date'],
                // showLoading: true,
                callback: function (selectOneObj, selectTwoObj, selectThreeObj) {

                    showDateDom.dataset['year'] = selectOneObj.id;
                    showDateDom.dataset['month'] = selectTwoObj.id;
                    showDateDom.dataset['date'] = selectThreeObj.id;
                    showDateDom.innerText = selectOneObj.id + '-' + formatNum(selectTwoObj.id) + '-' + formatNum(selectThreeObj.id);
                    showDateDom.style.color = 'rgb(51, 51, 51)';
                }
            });
    });
};

// 初始化加载
function initloading() {
    $("body").append(
        '<div id="myloadingCover" style="position: absolute"></div><div id="myloading"><img src="../custom/images/loading.gif" /><span>努力加载中...</span></div>'
    );
    $("#myloading").css(cssObj1);
    $("#myloading img").css(cssObj2);
    $("#myloading span").css(cssObj3);
    $('[data-dpr="2"] #myloading').css(cssObj4);
    $('[data-dpr="3"] #myloading').css(cssObj5);
    $("#myloadingCover").css(cssObj6);
};

// 显示加载
function showMyloading() {
    var loading = document.querySelector('#myloading');
    (loading == null || loading == undefined) && initloading();

    $("#myloading").css("display", "block");
    $("#myloadingCover").css("display", "block");
};

// 隐藏加载
function hideMyloading() {
    $("#myloading").css("display", "none");
    $("#myloadingCover").css("display", "none");
};

// css数据模版 加载用
var cssObj1 = {
    "width": "100%",
    "min-height": "2.666667rem",
    "text-align": "center",
    "position": "absolute",
    "top": "50%",
    "margin-top": "-3rem",
    "z-index": "99999",
    "display": "none"
};

var cssObj2 = {
    "display": "inline-block",
    "width": "2.666667rem",
    "height": "auto"
};

var cssObj3 = {
    "display": "block",
    "font-size": "14px",
    "color": "#999"
};

var cssObj4 = {
    "font-size": "28px"
};

var cssObj5 = {
    "font-size": "42px"
};

var cssObj6 = {
    "position": "absolute",
    "top": "0",
    "left": "0",
    "height": "100%",
    "width": "100%",
    "background-color": "#FFFFFF",
    "opacity": ".1",
    "z-index": "9999"
};


/* weui 精简 */
$.fn.transitionEnd = function (callback) {
    var events = ['webkitTransitionEnd', 'transitionend', 'oTransitionEnd', 'MSTransitionEnd', 'msTransitionEnd'],
        i,
        dom = this;

    function fireCallBack(e) {
        /*jshint validthis:true */
        if (e.target !== this) return;
        callback.call(this, e);
        for (i = 0; i < events.length; i++) {
            dom.off(events[i], fireCallBack);
        }
    }
    if (callback) {
        for (i = 0; i < events.length; i++) {
            dom.on(events[i], fireCallBack);
        }
    }
    return this;
};

/* weui 弹框 */
var defaults;

$.modal = function (params, onOpen) {
    params = $.extend({},
        defaults, params);

    var buttons = params.buttons;

    var buttonsHtml = buttons.map(function (d, i) {
        return '<a href="javascript:;" class="weui-dialog__btn ' + (d.className || "") + '">' + d.text + '</a>';
    }).join("");

    var tpl = '<div class="weui-dialog">' + '<div class="weui-dialog__hd"><strong class="weui-dialog__title">' + params.title + '</strong></div>' + (params.text ? '<div class="weui-dialog__bd">' + params.text + '</div>' : '') + '<div class="weui-dialog__ft">' + buttonsHtml + '</div>' + '</div>';

    var dialog = $.openModal(tpl, onOpen);

    dialog.find(".weui-dialog__btn").each(function (i, e) {
        var el = $(e);
        el.click(function () {
            //先关闭对话框，再调用回调函数
            if (params.autoClose) $.closeModal();

            if (buttons[i].onClick) {
                buttons[i].onClick.call(dialog);
            }
        });
    });

    return dialog;
};

$.openModal = function (tpl, onOpen) {
    var mask = $("<div class='weui-mask'></div>").appendTo(document.body);
    mask.show();

    var dialog = $(tpl).appendTo(document.body);

    if (onOpen) {
        dialog.transitionEnd(function () {
            onOpen.call(dialog);
        });
    }

    dialog.show();
    mask.addClass("weui-mask--visible");
    dialog.addClass("weui-dialog--visible");

    return dialog;
}

$.closeModal = function () {
    $(".weui-mask--visible").removeClass("weui-mask--visible").transitionEnd(function () {
        $(this).remove();
    });
    $(".weui-dialog--visible").removeClass("weui-dialog--visible").transitionEnd(function () {
        $(this).remove();
    });
};

$.alert = function (text, title, onOK) {
    var config;
    if (typeof text === 'object') {
        config = text;
    } else {
        if (typeof title === 'function') {
            onOK = arguments[1];
            title = undefined;
        }

        config = {
            text: text,
            title: title,
            onOK: onOK
        }
    }
    return $.modal({
        text: config.text,
        title: config.title,
        buttons: [{
            text: defaults.buttonOK,
            className: "primary",
            onClick: config.onOK
        }]
    });
}

// $.confirm = function(text, title, onOK, onCancel) {
// 	var config;
// 	if (typeof text === 'object') {
// 		config = text
// 	} else {
// 		if (typeof title === 'function') {
// 			onCancel = arguments[2];
// 			onOK = arguments[1];
// 			title = undefined;
// 		}
//
// 		config = {
// 			text: text,
// 			title: title,
// 			onOK: onOK,
// 			onCancel: onCancel
// 		}
// 	}
// 	return $.modal({
// 		text: config.text,
// 		title: config.title,
// 		buttons: [{
// 			text: defaults.buttonCancel,
// 			className: "default",
// 			onClick: config.onCancel
// 		},
// 		{
// 			text: defaults.buttonOK,
// 			className: "primary",
// 			onClick: config.onOK
// 		}]
// 	});
// };

defaults = $.modal.prototype.defaults = {
    title: "提示",
    text: undefined,
    buttonOK: "确定",
    buttonCancel: "取消",
    buttons: [{
        text: "确定",
        className: "primary"
    }],
    autoClose: true //点击按钮自动关闭对话框，如果你不希望点击按钮就关闭对话框，可以把这个设置为false
};

/* weui toast */
var timeout;

$.toptip = function (text, duration, type) {
    if (!text) return;
    if (typeof duration === typeof "a") {
        type = duration;
        duration = undefined;
    }
    duration = duration || 3000;
    var className = type ? 'bg-' + type : 'bg-danger';
    var $t = $('.weui-toptips').remove();
    $t = $('<div class="weui-toptips"></div>').appendTo(document.body);
    $t.html(text);
    $t[0].className = 'weui-toptips ' + className

    clearTimeout(timeout);

    if (!$t.hasClass('weui-toptips_visible')) {
        $t.show().width();
        $t.addClass('weui-toptips_visible');
    }

    timeout = setTimeout(function () {
        $t.removeClass('weui-toptips_visible').transitionEnd(function () {
            $t.remove();
        });
    },
        duration);
};

/* weui Toast  */
var show = function (html, className) {
    className = className || "";
    var mask = $("<div class='weui-mask_transparent'></div>").appendTo(document.body);

    var tpl = '<div class="weui-toast ' + className + '">' + html + '</div>';
    var dialog = $(tpl).appendTo(document.body);

    dialog.addClass("weui-toast--visible");
    dialog.show();
};

var hide = function (callback) {
    $(".weui-mask_transparent").remove();
    var done = false;
    var $el = $(".weui-toast--visible").removeClass("weui-toast--visible").transitionEnd(function () {
        var $this = $(this);
        $this.remove();
        callback && callback();
        done = true
    });

    setTimeout(function () {
        if (!done) {
            $el.remove();
            callback && callback();
        }
    },
        1000)
}

$.toast = function (text, style, callback) {
    if (typeof style === "function") {
        callback = style;
    }
    var className, iconClassName = 'weui-icon-success-no-circle';
    var duration = toastDefaults.duration;
    if (style == "cancel") {
        className = "weui-toast_cancel";
        iconClassName = 'weui-icon-cancel'
    } else if (style == "forbidden") {
        className = "weui-toast--forbidden";
        iconClassName = 'weui-icon-warn'
    } else if (style == "text") {
        className = "weui-toast--text";
    } else if (typeof style === typeof 1) {
        duration = style
    }
    show('<i class="' + iconClassName + ' weui-icon_toast"></i><p class="weui-toast_content">' + (text || "已经完成") + '</p>', className);

    setTimeout(function () {
        hide(callback);
    },
        duration);
}

// $.showLoading = function(text) {
//     var html = '<div class="weui_loading">';
//     html += '<i class="weui-loading weui-icon_toast"></i>';
//     html += '</div>';
//     html += '<p class="weui-toast_content">' + (text || "数据加载中") + '</p>';
//     show(html, 'weui_loading_toast');
// }
//
// $.hideLoading = function() {
//     hide();
// }

var toastDefaults = $.toast.prototype.defaults = {
    duration: 2500
}

Element.prototype.removeClass = function (name) {
    var classs = this.className.split(" ");
    var index = classs.indexOf(name);
    var currentClass = "";
    if (index < 0) return;
    classs[index] = "";
    classs.map(function (item) { currentClass = currentClass + item + " " });
    this.className = currentClass;
}
Element.prototype.addClass = function (name) {
    this.className = this.className + " " + name;
}
//百度坐标转高德（传入经度、纬度）
function bd_decrypt(bd_lng, bd_lat) {
    var X_PI = Math.PI * 3000.0 / 180.0;
    var x = bd_lng - 0.0065;
    var y = bd_lat - 0.006;
    var z = Math.sqrt(x * x + y * y) - 0.00002 * Math.sin(y * X_PI);
    var theta = Math.atan2(y, x) - 0.000003 * Math.cos(x * X_PI);
    var gg_lng = z * Math.cos(theta);
    var gg_lat = z * Math.sin(theta);
    return { lng: gg_lng, lat: gg_lat }
}

// 底部按钮 android兼容
// pageData.oHeight = $(document).height(); //浏览器当前的高度
// $(window).resize(function() {
// 	if ($(document).height() < pageData.oHeight) {
// 		$(".footer").css("position", "static")
// 	} else {
// 		$(".footer").css("position", "absolute")
// 	}
// });

//生成随机字符串
function randomWord(randomFlag, min, max) {
    min = 3; max = 40;
    var str = "", range = min,
        arr = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];

    // 随机产生
    if (randomFlag) {
        range = Math.round(Math.random() * (max - min)) + min;
    }
    for (var i = 0; i < range; i++) {
        var pos = Math.round(Math.random() * (arr.length - 1));
        str += arr[pos];
    }
    return str;
}

// addConsole()

function addConsole() {
    var script = document.createElement("script")
    script.type = "text/javascript";
    if (script.readyState) {
        script.onreadystatechange = function () {
            if (script.readyState == "loaded" || script.readyState == "complete") {
                script.onreadystatechange = null;
                new VConsole();
            }
        };
    } else {
        script.onload = function () {
            new VConsole();
        };
    }
    script.src = '../lib/js/vconsole.min.js';
    document.getElementsByTagName("head")[0].appendChild(script);

}

// 初始化日期选择 yLimit年数限制 selectId选择标签Id showId显示标签id level选择器等级1-6
function dateIOSelectInit(yLimit, selectId, showId, level, callBackFun, en) {

    var selectDateDom = document.getElementById(selectId);
    var selectDateDom2 = $("#" + selectId);
    var showDateDom = document.getElementById(showId);
    var showDateDom2 = $("#" + showId);
    var showDate = showDateDom.innerText;
    // 当前时间
    var now = new Date();
    var nowYear = now.getFullYear();
    var nowMonth = now.getMonth() + 1;
    var nowDay = now.getDate();
    // 默认当天
    showDateDom.dataset['year'] = nowYear;
    showDateDom.dataset['month'] = nowMonth;
    showDateDom.dataset['date'] = nowDay;
    // 是否有初始日期
    if (showDate.length == 10) {
        // yyyy-MM-dd
        var dateArr = showDate.split('-');
        showDateDom.dataset['year'] = dateArr[0] * 1;
        showDateDom.dataset['month'] = dateArr[1] * 1;
        showDateDom.dataset['date'] = dateArr[2] * 1;
    } else if (showDate.length == 16) {
        // yyyy-MM-dd HH:mm
        var dateArr = showDate.split(' ');
        var dateArrA = dateArr[0].split('-');
        showDateDom.dataset['year'] = dateArrA[0];
        showDateDom.dataset['month'] = dateArrA[1];
        showDateDom.dataset['date'] = dateArrA[2];
        var dateArrB = dateArr[1].split(':');
        showDateDom.dataset['hours'] = dateArrB[0];
        showDateDom.dataset['minutes'] = dateArrB[1];
    }
    // 个位加0显示
    function formatNum(num) {
        num = num < 10 ? '0' + num : num;
        return num;
    };
    // 数据初始化
    function formatYear(nowYear) {
        var arr = [];

        if (yLimit == -1) {
            // -1 往后推1年 往前推1年
            for (var i = nowYear; i <= nowYear + 1; i++) {
                arr.push({
                    id: i + '',
                    value: i + '年'
                });
            }
        } else {
            // 根据年数限制生成年数组
            for (var i = nowYear - yLimit; i <= nowYear; i++) {
                arr.push({
                    id: i + '',
                    value: i + '年'
                });
            }
        }

        return arr;
    };

    function formatMonth(m, isAfter) {
        var arr = [];
        var n = isAfter ? m : 1;
        var len = isAfter ? 12 : m;
        for (var i = n; i <= len; i++) {
            arr.push({
                id: i + '',
                value: i + '月'
            });
        }
        return arr;
    };

    function formatDate(d, cd, isAfter) {
        var arr = [];
        var n = isAfter ? d : 1;
        var len = isAfter ? cd : d;
        for (var i = n; i <= len; i++) {
            arr.push({
                id: i + '',
                value: i + '日'
            });
        }
        return arr;
    }
    var yearData = function (callback) {
        callback(formatYear(nowYear))
    }
    var monthData = function (year, callback) {
        var m = 1; // 默认为 一月
        var isAfter = true; // 默认为 传入月份之后

        if (yLimit == -1) {
            if (year == (nowYear - 1)) {
                m = nowMonth;
            };
            if (year == (nowYear + 1)) {
                m = nowMonth;
                isAfter = false;
            };
        } else {
            if (year == (nowYear - yLimit)) {
                m = nowMonth;
            };
            if (year == nowYear) {
                m = nowMonth;
                isAfter = false;
            };
        }

        callback(formatMonth(m, isAfter));
    };
    var dateData = function (year, month, callback) {
        var d = 28; // 默认为 平年二月天数
        var cd = 28; // month实际天数
        var isAfter = false; // 默认为 传入日期之前
        var isLeapYear = (nowYear % 4 === 0 && nowYear % 100 !== 0 || nowYear % 400 === 0); // 实际当前年份是否是闰年

        if (/^(1|3|5|7|8|10|12)$/.test(month)) {
            d = 31;
            cd = 31;
        } else if (/^(4|6|9|11)$/.test(month)) {
            d = 30;
            cd = 30;
        } else if (/^2$/.test(month)) {
            if (year % 4 === 0 && year % 100 !== 0 || year % 400 === 0) { // 选择器选择年份是否为闰年
                d = 29;
                cd = 29;
            };
        };

        // if (yLimit == 18 && month == nowMonth) {
        if (month == nowMonth) {

            if (yLimit == -1) {
                if (year == (nowYear - 1)) {
                    // 实际当前年份是闰年 且 选了二月份最后一天
                    d = (isLeapYear && month == 2 && nowDay == 29) ? 28 : nowDay;
                    isAfter = true;
                };
                if (year == (nowYear + 1)) {
                    d = (isLeapYear && month == 2 && nowDay == 29) ? 28 : nowDay;
                };
            } else {
                if (year == (nowYear - yLimit)) {
                    d = nowDay;
                    isAfter = true;
                };
                if (year == nowYear) {
                    d = nowDay;
                };
            }
        };

        callback(formatDate(d, cd, isAfter));
    };

    if (level == 5) {
        var hourData = function (one, two, three, callback) {
            var hours = [];
            for (var i = 0, len = 24; i < len; i++) {
                hours.push({
                    id: i,
                    value: i + '时'
                });
            }
            callback(hours);
        };
        var minuteData = function (one, two, three, four, callback) {
            var minutes = [];
            for (var i = 0, len = 60; i < len; i++) {
                minutes.push({
                    id: i,
                    value: i + '分'
                });
            }
            callback(minutes);
        };
        selectDateDom.addEventListener('click', function () {
            var iosSelect = new IosSelect(5,
                [yearData, monthData, dateData, hourData, minuteData], {
                title: '选择日期',
                itemHeight: 40,
                // itemShowCount: 9,
                oneLevelId: showDateDom.dataset['year'],
                twoLevelId: showDateDom.dataset['month'],
                threeLevelId: showDateDom.dataset['date'],
                fourLevelId: showDateDom.dataset['hours'],
                fiveLevelId: showDateDom.dataset['minutes'],
                callback: function (selectOneObj, selectTwoObj, selectThreeObj, selectFourObj, selectFiveObj) {

                    showDateDom.dataset['year'] = selectOneObj.id;
                    showDateDom.dataset['month'] = selectTwoObj.id;
                    showDateDom.dataset['date'] = selectThreeObj.id;
                    showDateDom.dataset['hours'] = selectFourObj.id;
                    showDateDom.dataset['minutes'] = selectFiveObj.id;

                    showDateDom.innerText = selectOneObj.id + '-' + formatNum(selectTwoObj.id) + '-' + formatNum(selectThreeObj.id) + ' ' + formatNum(selectFourObj.id) + ':' + formatNum(selectFiveObj.id);
                    showDateDom.style.color = 'rgb(51, 51, 51)';
                }
            });
        });
    } else {
        selectDateDom.addEventListener('click', function () {
            var iosSelect = new IosSelect(3,
                [yearData, monthData, dateData], {
                title: en ? 'Please select a date' : '请选择日期',
                itemHeight: 40,
                oneLevelId: showDateDom.dataset['year'],
                twoLevelId: showDateDom.dataset['month'],
                threeLevelId: showDateDom.dataset['date'],
                // showLoading: true,
                callback: function (selectOneObj, selectTwoObj, selectThreeObj) {
                    if (time_future(selectOneObj.id + '-' + formatHour(selectTwoObj.id) + '-' + formatHour(selectThreeObj.id))) {
                        $.toast('只能选择未来时间', 'text');;
                        return;
                    }

                    showDateDom.dataset['year'] = selectOneObj.id;
                    showDateDom.dataset['month'] = selectTwoObj.id;
                    showDateDom.dataset['date'] = selectThreeObj.id;

                    showDateDom2.val(selectOneObj.id + '-' + formatNum(selectTwoObj.id) + '-' + formatNum(selectThreeObj.id));
                    showDateDom.style.color = 'rgb(51, 51, 51)';

                    var TEXT = selectOneObj.id + '-' + formatNum(selectTwoObj.id) + '-' + formatNum(selectThreeObj.id);

                    if (callBackFun) {
                        callBackFun(showDateDom.innerText, selectOneObj.id + '/' + formatNum(selectTwoObj.id) + '/' + formatNum(selectThreeObj.id), TEXT)
                    }
                }
            });
            if (en) {
                $('.close').text('close')
                $('.sure').text('sure')
            }

        });
    }
};

//判断是否是未来时间
function time_future(chooseTime) {
    var time = chooseTime + " " + "00:00:00";
    time = time.replace(/-/g, ':').replace(' ', ':');
    time = time.split(':');
    var n = new Date(time[0], (time[1] - 1), time[2], time[3], time[4], time[5]);

    var b = new Date();
    if (Date.parse(n) - Date.parse(b) >= 0) {
        return false;
    } else {
        return true;
    }
}
//判断今天是否过了预约时间
function time_past(appointTime) {
    var time = appointTime + " " + "23:59:59";
    time = time.replace(/-/g, ':').replace(' ', ':');
    time = time.split(':');
    var n = new Date(time[0], (time[1] - 1), time[2], time[3], time[4], time[5]);

    var b = new Date();
    if (Date.parse(n) - Date.parse(b) < 0) {
        return true;
    } else {
        return false;
    }
}

//生成选择数据
function formatHour(i) {
    if (i < 10) {
        return '0' + i
    } else {
        return i
    }
}

function GetSM2Key(obj, SM2CallbackFun) {
    if (custom.pubkeyHex) {
        SM2CallbackFun(obj);
        return;
    }
    custom.ajaxRequest({
        url: net.getEncryptSecret,
        type: "POST",
        data: JSON.stringify({ accountId: pageData.userInfo.accountId })
    }, function (data) {
        if (data.code == 0) {
            custom.pubkeyHex = data.data;
            SM2CallbackFun(obj);
        } else {
            custom.toasts(data.msg, 'error');
        }
    })
}


if (custom.isSMY()) {
    $("body").addClass("fromSuishenban")
    $("html").addClass("fromSuishenban")
}





